# Application Configuration
APP_NAME="Knowledge Base API"
APP_VERSION="0.1.0"
DEBUG=false

# Server Configuration
HOST=0.0.0.0
PORT=8000

# CORS Configuration
# Comma-separated list of allowed origins
CORS_ORIGINS=http://localhost:3000

# 1Password Service Account Token
# Set this as an environment variable in your ~/.zshrc:
# export OP_MONGADO_SERVICE_ACCOUNT_TOKEN="ops_your_token_here"
#
# For local development, add to ~/.zshrc and reload with: source ~/.zshrc
# For production, inject via environment variable or Docker build args
# For Docker: the token is passed through from your environment automatically

# Database (for future use)
# DATABASE_URL=postgresql://user:password@localhost:5432/knowledge_base

# Neo4j Configuration (for Zettelkasten notes graph)
NEO4J_URI=bolt://localhost:7687
NEO4J_USER=neo4j
NEO4J_PASSWORD=mongado-dev-password  # Change in production!
NEO4J_DATABASE=neo4j

# Zettelkasten Authentication
ADMIN_PASSKEY=  # Set this to enable persistent note creation (admin only)

# Ollama Configuration (for AI features)
OLLAMA_HOST=http://localhost:11434
OLLAMA_MODEL=llama3.2:latest
OLLAMA_ENABLED=true

# API Keys - Store these in 1Password!
# DO NOT put actual API keys here - use 1Password references instead
# Format: op://vault-name/item-name/field-name
#
# Examples:
# OPENAI_API_KEY=op://Private/OpenAI/credential
# ANTHROPIC_API_KEY=op://Private/Anthropic/api-key
# DATABASE_PASSWORD=op://Private/PostgreSQL/password
#
# To create secrets in 1Password:
# 1. Open 1Password app
# 2. Create a new item (e.g., "OpenAI")
# 3. Add a field for your API key (e.g., "credential" or "api-key")
# 4. Reference it here using the format above
