services:
  neo4j:
    image: neo4j:latest
    container_name: mongado-neo4j-prod
    ports:
      - "7474:7474"  # HTTP (browser interface)
      - "7687:7687"  # Bolt protocol
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH:-neo4j/changeme}
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - BACKUP_DIR=/var/mongado-backups
      - BACKUP_RETENTION_COUNT=14
      - BACKUP_RETENTION_DAYS=30
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
      - /var/mongado-backups:/var/mongado-backups  # Backup storage on host
      - ./backend/scripts:/scripts:ro  # Backup scripts (read-only)
    networks:
      - mongado-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:7474 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  ollama:
    image: ollama/ollama:latest
    container_name: mongado-ollama-prod
    ports:
      - "11434:11434"
    environment:
      # Aggressive model unloading to prevent OOM on 4GB server (issue #59)
      - OLLAMA_MAX_LOADED_MODELS=1  # Only keep 1 model in memory at a time
      - OLLAMA_NUM_PARALLEL=1        # Limit concurrent requests to 1
      - OLLAMA_KEEP_ALIVE=0          # Unload model immediately after use (no idle time)
    volumes:
      - ollama-data:/root/.ollama
    networks:
      - mongado-network
    restart: always
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  backend:
    build:
      context: ./backend
      target: production
    container_name: mongado-backend-prod
    ports:
      - "8000:8000"
    environment:
      - DEBUG=false
      - OP_MONGADO_SERVICE_ACCOUNT_TOKEN=${OP_MONGADO_SERVICE_ACCOUNT_TOKEN}
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD:-changeme}
      - OLLAMA_HOST=http://ollama:11434
      - OLLAMA_ENABLED=true
    env_file:
      - ./backend/.env
    volumes:
      - ./backend/static:/app/static:ro  # Mount static files for hot-reload without restart
    networks:
      - mongado-network
    depends_on:
      neo4j:
        condition: service_healthy
      ollama:
        condition: service_started
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  frontend:
    build:
      context: ./frontend
      target: production
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
    container_name: mongado-frontend-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - mongado-network
    restart: always
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backup-cron:
    image: alpine:latest
    container_name: mongado-backup-cron
    command: >
      sh -c "
      echo '0 2 * * * docker exec mongado-neo4j-prod /scripts/backup_neo4j.sh >> /var/log/backup.log 2>&1' > /etc/crontabs/root &&
      crond -f -l 2
      "
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Docker socket for exec
      - /var/mongado-backups:/var/mongado-backups  # Backup directory
    restart: always
    depends_on:
      neo4j:
        condition: service_healthy

networks:
  mongado-network:
    driver: bridge

volumes:
  neo4j-data:
  neo4j-logs:
  ollama-data:
